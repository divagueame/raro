{"version":3,"sources":["UserInput.js","GuessDisplay.js","NextGameButton.js","App.js","index.js"],"names":["UserInput","currentWord","triggerNext","useState","userInput","setUserInput","setIsSolved","useEffect","setTimeout","console","log","onSubmit","e","preventDefault","type","autoFocus","value","onChange","target","GuessDisplay","word","helped","splitSentence","s","i","arr","substr","className","sentence","wordIndex","str","length","hiddenWordUnderscores","src","process","imgSrc","alt","NextGameButton","updateCurrentWord","setPlaying","onClick","App","wordsBank","id","seen","wordsArray","setWordsArray","setCurrentWord","playing","randomIndex","Math","floor","random","randomWord","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a514d0d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst UserInput = ({currentWord, triggerNext}) => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [isSolved, setIsSolved] = useState(false)\r\n  \r\n\r\n  useEffect(()=>{\r\n    if(userInput===currentWord){\r\n      \r\n      setIsSolved(true);\r\n      setTimeout(() => {\r\n          \r\n        setIsSolved(false);\r\n        setUserInput('');\r\n        triggerNext();\r\n      }, 1500);\r\n\r\n    }\r\n\r\n    return ()=>{\r\n      console.log(\"USE Effect cleanup\")\r\n    }\r\n\r\n  },[userInput])\r\n\r\n  function handleUserInput (e){\r\n    setUserInput(e.target.value);\r\n  }\r\n  \r\n  function submitFunction(e){e.preventDefault()}\r\n\r\n  return (\r\n    <form onSubmit={submitFunction}>\r\n      <input type=\"text\" autoFocus value={userInput} onChange={handleUserInput}></input>  \r\n      {/* <div>user input: {userInput}</div> */}\r\n      {/* <div>{isSolved && 'SOLVED!'}</div> */}\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default UserInput;\r\n","import UserInput from './UserInput';\r\n\r\nconst GuessDisplay = ({word, helped, triggerNext}) => {\r\n\r\n  function splitSentence(s,i){\r\n    let arr = [];\r\n    arr[0] = s.substr(0,i);\r\n    arr[1] = s.substr(i);\r\n    return arr\r\n  }\r\n\r\n  function hiddenWordUnderscores(word){\r\n    let str = \"_\"\r\n    \r\n    for(let i=0;i<=word.word.length;i++){\r\n      str += \"_\"\r\n    }\r\n    return str\r\n  }\r\n\r\n  return (\r\n    <div className=\"guessDisplayContainer\">\r\n      <div className=\"guessDisplay\">\r\n      {helped && <p>{splitSentence(word.sentence,word.wordIndex)[0]} {word.word} {splitSentence(word.sentence,word.wordIndex)[1]}</p>} \r\n      {!helped && <p>{splitSentence(word.sentence,word.wordIndex)[0]} {hiddenWordUnderscores(word)} {splitSentence(word.sentence,word.wordIndex)[1]}</p>} \r\n      <UserInput currentWord={word.word} triggerNext={triggerNext}/>\r\n      <img className=\"guess-display-img\" src={process.env.PUBLIC_URL + word.imgSrc} alt=\"Guess...\" />\r\n      \r\n      \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default GuessDisplay","import React from 'react'\r\n\r\nexport default function NextGameButton({updateCurrentWord, setPlaying}) {\r\n  return (\r\n        <button type=\"button\" onClick={() => {updateCurrentWord(); setPlaying(true)}}>\r\n          New game\r\n        </button>\r\n  )\r\n}\r\n","import './App.css';\nimport Header from './Header'\nimport UserInput from './UserInput';\nimport GuessDisplay from './GuessDisplay';\nimport GetHelp from './GetHelp';\nimport NextGameButton from './NextGameButton';\nimport {useState, useEffect } from 'react';\n\n\nfunction App() {\n  let wordsBank = [{\n    id: 1,\n    word: 'globo',\n    wordIndex: 3,\n    sentence: 'El  es precioso.',\n    imgSrc: '/img/037-hot air balloon.png',\n    seen: false\n  },\n  {\n    id: 2,\n    word: 'bicicleta',\n    wordIndex: 7,\n    sentence: 'Es una  muy bonita.',\n    imgSrc: '/img/025-bicycle.png',\n    seen: false\n  }\n  // ,{\n  //   id: 3,\n  //   word: 'limusina',\n  //   wordIndex: 4,\n  //   sentence: 'Una  de alto nivel.',\n  //   imgSrc: '/img/042-limousine.png',\n  //   seen: false\n  // },\n  // {\n  //   id: 4,\n  //   word: 'camion',\n  //   wordIndex: 8,\n  //   sentence: 'Este es  un  muy pesado.',\n  //   imgSrc: '/img/048-truck.png',\n  //   seen: false\n  // },\n  // {\n  //   id: 5,\n  //   word: 'caravana',\n  //   wordIndex: 4,\n  //   sentence: 'Una  muy amplia.',\n  //   imgSrc: '/img/050-caravan.png',\n  //   seen: false\n  // },\n  // {\n  //   id: 6,\n  //   word: 'coche',\n  //   wordIndex: 3,\n  //   sentence: 'Un  muy util.',\n  //   imgSrc: '/img/002-car.png',\n  //   seen: false\n  // }\n]\n\n  const [wordsArray, setWordsArray] = useState(wordsBank);\n  const [currentWord, setCurrentWord] = useState();\n  const [playing,setPlaying] = useState(false);\n  const [helped,setHelped] = useState(false);\n  \n\n  function updateCurrentWord(){\n    if(wordsArray.length>=1){\n      let randomIndex = Math.floor(Math.random()*wordsArray.length)\n      let randomWord = wordsArray[randomIndex]\n      setCurrentWord(randomWord);\n      setWordsArray(wordsArray.filter(word=>word!==randomWord));\n    } \n  }\n\n  function triggerNext(){\n    if(wordsArray.length>0){\n        updateCurrentWord()\n    }else{\n      setPlaying(false);\n      setWordsArray(wordsBank);\n      updateCurrentWord()\n      console.log(\"GAME OVER\")\n    }\n  }\n\n  return (  \n    // <div className=\"App\">\n    <>\n      {/* <Header /> */}\n\n      {!playing &&  \n      <NextGameButton updateCurrentWord={updateCurrentWord} setPlaying={setPlaying}/>\n      }\n      {/* {playing &&<UserInput currentWord={currentWord.word} triggerNext={triggerNext}/>} */}\n      {/* {!playing &&  <NextGameButton setPlaying={setPlaying} updateCurrentWord={updateCurrentWord}/>} */}\n      \n      {/* {playing && <GetHelp setHelped={setHelped} word={currentWord}/>} */}\n      \n      {playing && <GuessDisplay word={currentWord} helped={helped} triggerNext={triggerNext}/>}\n      \n\n\n      {/* {playing && <div>Current target word is: {currentWord.word}. Total words left: {wordsArray.length}</div>} */}\n    {/* </div> */}\n    </>\n  );\n}\n\nexport default App;\n\n\n\n{/* <Collapsible>\n<h2>Title</h2>\n<p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Deleniti assumenda a quibusdam tenetur laboriosam nihil accusantium tempore quasi perspiciatis unde.</p>\n</Collapsible> */}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}